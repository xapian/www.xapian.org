#!/bin/bash

# This script rebuilds the website.
#
# We want to be able to run this script from cron (though we don't currently)
# so it should not unconditionally involve any operations (such as building the
# documentation) which are going to be fairly costly.
#
# To avoid this we implement such operations in a lazy way, only performing
# them when the source data has changed.

set -e

projectdir="/home/olly/tmp/xapian-website-update"
htmldir="/srv/www/xapian.org"
basetarballdir="/srv/www/oligarchy.co.uk/xapian"

stagedir="${projectdir}/staging"

prefix=/srv/search/xapian.org
templatedir=${prefix}/templates
dbdir=${prefix}/data
logdir=${prefix}/logs
bindir=${prefix}/bin

###

# Avoid repeats of having a broken 404 handler
for perl_script in \
	    404handler.cgi \
	; do
    if ! perl -wc -f "$perl_script" ; then
	echo "Syntax error(s) in '$perl_script'" 1>&2
	exit 1
    fi
done

# Prepare temporary directory
mkdir -p "$projectdir" "$stagedir" "$stagedir"/docs "$logdir"
chmod o=rx "$stagedir"
chmod g=rws "$stagedir"

chmod 777 "$logdir"

out=`./generate`
# Grab values from generate, e.g.:
# version='1.2.21'
# extension='tar.xz'
eval "$out"

umask 0002
srcdir=`pwd`
cd "$projectdir"

echo "Latest Xapian release is $version"
tarballdir=$basetarballdir/$version
old_tarballdir=$basetarballdir/$old_version
dev_tarballdir=$basetarballdir/$dev_version

tardir=xapian-core-$version
tarball=$tarballdir/$tardir.$extension
if ! test -r "$tarball" ; then
  echo "$0: Latest release tarball doesn't exist: '$tarball'"
  exit 1
fi

cp -au "$srcdir"/*.css "$stagedir"
cp -au "$srcdir"/*.html "$stagedir"
# But not this - it's actually the template for omega.
rm -f "$stagedir"/search.html
cp -au "$srcdir"/*.ico "$stagedir"
cp -au "$srcdir"/*.png "$stagedir"
cat <<__END__ > "$stagedir/omega.conf"
database_dir $dbdir
template_dir $templatedir
log_dir $logdir
__END__
cp -au "$srcdir"/robots.txt "$stagedir"
cp -au "$srcdir"/404handler.cgi "$stagedir"
cp -au "$srcdir"/svn2git41.map "$stagedir"
mkdir -p "$stagedir"/docs/bindings
cp -au "$srcdir"/docs/bindings/index.html "$stagedir"/docs/bindings
ln -sf "$prefix"/lib/xapian-omega/bin/omega "$stagedir"/search.cgi
# Not *.tt .git generate news-to-html styleandmeta.txt update_website

if test "$tarball" -nt xapian-core/stamp-unpacked ; then
  rm -rf "$tardir" xapian-core
  tar xf "$tarball"
  chmod go= "$tardir"
  chmod g+rws "$tardir"
  mv "$tardir" xapian-core
  touch xapian-core/stamp-unpacked
fi
if test xapian-core/stamp-unpacked -nt xapian-core/stamp-built ; then
  cd xapian-core
  # Build with -fPIC so bindings can be built.
  ./configure --prefix="${prefix}" --disable-shared --disable-backend-chert --enable-silent-rules CXXFLAGS='-fPIC -g -O2'
  make
  make install
  cd ..
  touch xapian-core/stamp-built
fi
cp -au xapian-core/docs/*.html "$stagedir/docs"
mkdir -p "$stagedir/docs/apidoc/html"
cp -au xapian-core/docs/apidoc/html/* "$stagedir/docs/apidoc/html"
if test xapian-core/stamp-unpacked -nt xapian-core/stamp-built-sourcedoc ; then
  cd xapian-core
  ./configure --enable-maintainer-mode
  make -C docs doxygen_source_docs
  cd ..
  touch xapian-core/stamp-built-sourcedoc
fi
mkdir -p "$stagedir/docs/sourcedoc"
cp -au xapian-core/docs/sourcedoc/html "$stagedir/docs/sourcedoc"
mkdir -p "$stagedir/docs/xapian-core-$version"
cp -au xapian-core/NEWS "$stagedir/docs/xapian-core-$version/NEWS"

tardir=xapian-omega-$version
tarball=$tarballdir/$tardir.$extension
if ! test -r "$tarball" ; then
  echo "$0: Latest release tarball doesn't exist: '$tarball'"
  exit 1
fi

if test "$tarball" -nt xapian-omega/stamp-unpacked ; then
  rm -rf "$tardir" xapian-omega
  tar xf "$tarball"
  chmod go= "$tardir"
  chmod g+rws "$tardir"
  mv "$tardir" xapian-omega
  touch xapian-omega/stamp-unpacked
fi
if test xapian-omega/stamp-unpacked -nt xapian-omega/stamp-built ; then
  cd xapian-omega
  ./configure --prefix="${prefix}" XAPIAN_CONFIG="${bindir}"/xapian-config
  make
  make install
  cd ..
  touch xapian-omega/stamp-built
fi
mkdir -p "$stagedir/docs/omega"
cp -au xapian-omega/docs/*.html "$stagedir/docs/omega"
mkdir -p "$stagedir/docs/xapian-omega-$version"
cp -au xapian-omega/NEWS "$stagedir/docs/xapian-omega-$version/NEWS"
mkdir -p "${templatedir}"
cp -au xapian-omega/templates/inc/toptermsjs "${templatedir}"

tardir=xapian-bindings-$version
tarball=$tarballdir/$tardir.$extension
if ! test -r "$tarball" ; then
  echo "$0: Latest release tarball doesn't exist: '$tarball'"
  exit 1
fi

if test "$tarball" -nt xapian-bindings/stamp-unpacked ; then
  rm -rf "$tardir" xapian-bindings
  tar xf "$tarball"
  chmod go= "$tardir"
  chmod g+rws "$tardir"
  mv "$tardir" xapian-bindings
  touch xapian-bindings/stamp-unpacked
fi
if test xapian-bindings/stamp-unpacked -nt xapian-bindings/stamp-built-docs ; then
  cd xapian-bindings
  ./configure XAPIAN_CONFIG="${bindir}"/xapian-config
  make -C python
  make -C python3
  make -C ruby
  cd ..
  touch xapian-bindings/stamp-built-docs
fi
bindings_dir=$stagedir/docs/bindings
mkdir -p "$bindings_dir"
for l in python python3 ; do
  mkdir -p "$bindings_dir/$l"
  cp -au "xapian-bindings/$l"/docs/{examples,html/*} "$bindings_dir/$l"
done
for l in php php7 ruby tcl8 csharp java lua ; do
  mkdir -p "$bindings_dir/$l"
  cp -au "xapian-bindings/$l"/docs/* "$bindings_dir/$l"
done
find "$bindings_dir" -name '*.rst' -delete
rm -f "$bindings_dir"/python*/*.{inv,py}
rm -f "$bindings_dir"/ruby/*.rb
mkdir -p "$stagedir/docs/xapian-bindings-$version"
cp -au "xapian-bindings"/NEWS "$stagedir/docs/xapian-bindings-$version/NEWS"

if [ -n "$old_version" ] ; then
  for b in xapian-core xapian-bindings xapian-omega ; do
    td=$b-$old_version
    d=$stagedir/docs/$td
    if [ ! -f "$d/NEWS" ] ; then
      mkdir -p "$d"
      t=$old_tarballdir/$td.$old_extension
      tar -O -xf "$t" $td/NEWS > "$d/NEWS"
    fi
  done
  # FIXME: doesn't handle Search-Xapian-0.9.9.1.tar.gz
  tardir=Search-Xapian-$old_version.0
  tarball=$old_tarballdir/$tardir.tar.gz
  if ! test -r "$tarball" ; then
    echo "$0: Latest release tarball doesn't exist: '$tarball'"
  fi

  if test "$tarball" -nt Search-Xapian/stamp-unpacked ; then
    rm -rf "$tardir" Search-Xapian
    tar xf "$tarball"
    chmod go= "$tardir"
    chmod g+rws "$tardir"
    mv "$tardir" Search-Xapian
    cd Search-Xapian
    perl Makefile.PL XAPIAN_CONFIG="${bindir}"/xapian-config
    make LINKTYPE=static
    ./makehtmldocs
    cd ..
    touch Search-Xapian/stamp-unpacked
  fi
  mkdir -p "$stagedir/docs/bindings/perl"
  cp -au "Search-Xapian"/html/* "Search-Xapian"/README "$stagedir/docs/bindings/perl"
  mkdir -p "$stagedir/docs/Search-Xapian-$old_version.0"
  cp -au "Search-Xapian"/Changes "$stagedir/docs/Search-Xapian-$old_version.0/Changes"
fi

if [ -n "$dev_version" ] ; then
  for b in xapian-core xapian-bindings xapian-omega ; do
    td=$b-$dev_version
    d=$stagedir/docs/$td
    if [ ! -f "$d/NEWS" ] ; then
      mkdir -p "$d"
      t=$dev_tarballdir/$td.$dev_extension
      tar -O -xf "$t" $td/NEWS > "$d/NEWS"
    fi
  done
fi

chmod -R g+rw "${stagedir}"

# update website with new image using rsync.
# don't delete: we want to be able to upload files, and/or autogenerate
# files.
# FIXME: set it up to delete except for in certain directories which are
# generated, 
# --delete --delete-after
rsync -a -C "${stagedir}/" --exclude=Makefile.am --exclude=Makefile.in --exclude='*.md5' --exclude='*.dot' "${htmldir}/"
cp -a "$srcdir/"search.html "${templatedir}/query"

# rebuild omega's database
# FIXME: sort out permissions so this'll work for other people too
mkdir -p "${dbdir}"
rm -rf "${dbdir}/tmp" "${dbdir}/tmp.compact" "${dbdir}/default.old"
tocull=`cd "${dbdir}" && echo default.*`
timestamp=`date +%s.%N`
"${bindir}"/omindex --sample-size=100K --spelling --db "${dbdir}/tmp" --url / \
    -Mcgi:ignore -Mgif:ignore -Mico:ignore -Mpng:ignore \
    -Mmap:ignore \
    -Mgz:ignore -Mphp:ignore \
    -Mconf:ignore -Mspec:ignore -Mxml:ignore \
    -Mcs:text/plain \
    -Mjava:text/plain \
    -Mphp5:text/plain \
    -Mphp7:text/plain \
    -Mpy:text/plain \
    -Mrb:text/plain \
    -Mtcl:text/plain \
    -Mlua:text/plain \
    "$htmldir"
"${bindir}"/xapian-compact -s "${dbdir}/tmp" "${dbdir}/tmp.compact"
rm -rf "${dbdir}/tmp"

if test -d "${dbdir}"/default ; then
  # migration from old version
  mv "${dbdir}"/default "${dbdir}"/default.old
fi
mv -f "${dbdir}"/tmp.compact "${dbdir}"/default
[ "$tocull" == "default.*" ] || ( cd "${dbdir}" && rm -rf $tocull )

# return successfully.
exit 0
